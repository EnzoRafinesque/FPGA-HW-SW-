-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matmul_matmul_Pipeline_readA is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln34 : IN STD_LOGIC_VECTOR (29 downto 0);
    A_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_V_ce0 : OUT STD_LOGIC;
    A_V_we0 : OUT STD_LOGIC;
    A_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of matmul_matmul_Pipeline_readA is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv496_lc_1 : STD_LOGIC_VECTOR (495 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_10 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal icmp_ln34_reg_333 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_337 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op44_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_predicate_op58_read_state16 : BOOLEAN;
    signal ap_block_state16_pp0_stage15_iter0 : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal gmem0_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_pp0_stage13 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal ap_block_pp0_stage15 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op62_read_state17 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln34_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_333_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_337_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal gmem0_addr_read_reg_346 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_addr_read_1_reg_351 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op45_read_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal gmem0_addr_read_2_reg_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op46_read_state4 : BOOLEAN;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal gmem0_addr_read_3_reg_361 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op47_read_state5 : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal gmem0_addr_read_4_reg_366 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op48_read_state6 : BOOLEAN;
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal gmem0_addr_read_5_reg_371 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op49_read_state7 : BOOLEAN;
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal gmem0_addr_read_6_reg_376 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op50_read_state8 : BOOLEAN;
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal gmem0_addr_read_7_reg_381 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op51_read_state9 : BOOLEAN;
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal gmem0_addr_read_8_reg_386 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op52_read_state10 : BOOLEAN;
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal gmem0_addr_read_9_reg_391 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op53_read_state11 : BOOLEAN;
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal gmem0_addr_read_10_reg_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op54_read_state12 : BOOLEAN;
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal gmem0_addr_read_11_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op55_read_state13 : BOOLEAN;
    signal ap_block_state13_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal gmem0_addr_read_12_reg_406 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op56_read_state14 : BOOLEAN;
    signal ap_block_state14_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal gmem0_addr_read_13_reg_411 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op57_read_state15 : BOOLEAN;
    signal ap_block_state15_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal gmem0_addr_read_14_reg_416 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal shiftreg4_cast_fu_178_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem0_addr_read_15_reg_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_phi_mux_empty_29_phi_fu_109_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln40_s_fu_243_p17 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_29_reg_106 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_29_reg_106 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln40_fu_238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shiftreg4_fu_66 : STD_LOGIC_VECTOR (495 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_70 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_6_fu_279_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_fu_212_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal itr_fu_78 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln34_fu_148_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_itr_2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_30_fu_154_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln36_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_5_fu_200_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln38_fu_194_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln40_fu_220_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_cast_fu_224_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln36_fu_208_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_fu_232_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_ext_blocking_cur_n : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component matmul_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component matmul_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_empty_29_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln40_reg_337 = ap_const_lv1_0) and (icmp_ln34_reg_333 = ap_const_lv1_0))) then 
                ap_phi_reg_pp0_iter1_empty_29_reg_106 <= shiftreg4_cast_fu_178_p1;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001))) then 
                ap_phi_reg_pp0_iter1_empty_29_reg_106 <= ap_phi_reg_pp0_iter0_empty_29_reg_106;
            end if; 
        end if;
    end process;

    i_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_fu_74 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                i_fu_74 <= i_3_fu_212_p3;
            end if; 
        end if;
    end process;

    itr_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln34_fu_142_p2 = ap_const_lv1_0))) then 
                    itr_fu_78 <= add_ln34_fu_148_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    itr_fu_78 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_fu_70 <= ap_const_lv9_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                j_fu_70 <= j_6_fu_279_p2;
            end if; 
        end if;
    end process;

    shiftreg4_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                shiftreg4_fu_66 <= ap_const_lv496_lc_1;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                shiftreg4_fu_66 <= ap_phi_mux_empty_29_phi_fu_109_p4(511 downto 16);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op54_read_state12 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001))) then
                gmem0_addr_read_10_reg_396 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op55_read_state13 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001))) then
                gmem0_addr_read_11_reg_401 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op56_read_state14 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001))) then
                gmem0_addr_read_12_reg_406 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op57_read_state15 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001))) then
                gmem0_addr_read_13_reg_411 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_predicate_op58_read_state16 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001))) then
                gmem0_addr_read_14_reg_416 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_predicate_op62_read_state17 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem0_addr_read_15_reg_426 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op45_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                gmem0_addr_read_1_reg_351 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op46_read_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                gmem0_addr_read_2_reg_356 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op47_read_state5 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                gmem0_addr_read_3_reg_361 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op48_read_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then
                gmem0_addr_read_4_reg_366 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op49_read_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001))) then
                gmem0_addr_read_5_reg_371 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op50_read_state8 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001))) then
                gmem0_addr_read_6_reg_376 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op51_read_state9 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001))) then
                gmem0_addr_read_7_reg_381 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op52_read_state10 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001))) then
                gmem0_addr_read_8_reg_386 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op53_read_state11 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001))) then
                gmem0_addr_read_9_reg_391 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op44_read_state2 = ap_const_boolean_1))) then
                gmem0_addr_read_reg_346 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln34_reg_333 <= icmp_ln34_fu_142_p2;
                icmp_ln34_reg_333_pp0_iter1_reg <= icmp_ln34_reg_333;
                icmp_ln40_reg_337_pp0_iter1_reg <= icmp_ln40_reg_337;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln40_reg_337 <= icmp_ln40_fu_158_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1, ap_block_pp0_stage15_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_V_address0 <= zext_ln40_fu_238_p1(8 - 1 downto 0);

    A_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            A_V_ce0 <= ap_const_logic_1;
        else 
            A_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_d0 <= ap_phi_mux_empty_29_phi_fu_109_p4(16 - 1 downto 0);

    A_V_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            A_V_we0 <= ap_const_logic_1;
        else 
            A_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln34_fu_148_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_itr_2) + unsigned(ap_const_lv9_1));
    add_ln38_fu_194_p2 <= std_logic_vector(unsigned(i_fu_74) + unsigned(ap_const_lv32_1));
    add_ln40_fu_232_p2 <= std_logic_vector(unsigned(tmp_1_cast_fu_224_p3) + unsigned(trunc_ln36_fu_208_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_RVALID, ap_predicate_op62_read_state17)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_predicate_op62_read_state17 = ap_const_boolean_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_RVALID, ap_predicate_op62_read_state17)
    begin
                ap_block_pp0_stage0_subdone <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_predicate_op62_read_state17 = ap_const_boolean_1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage10_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op53_read_state11)
    begin
                ap_block_pp0_stage10_11001 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op53_read_state11 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage10_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op53_read_state11)
    begin
                ap_block_pp0_stage10_subdone <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op53_read_state11 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage11_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op54_read_state12)
    begin
                ap_block_pp0_stage11_11001 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op54_read_state12 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage11_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op54_read_state12)
    begin
                ap_block_pp0_stage11_subdone <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op54_read_state12 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage12_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op55_read_state13)
    begin
                ap_block_pp0_stage12_11001 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op55_read_state13 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage12_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op55_read_state13)
    begin
                ap_block_pp0_stage12_subdone <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op55_read_state13 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage13_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op56_read_state14)
    begin
                ap_block_pp0_stage13_11001 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op56_read_state14 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage13_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op56_read_state14)
    begin
                ap_block_pp0_stage13_subdone <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op56_read_state14 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage14_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op57_read_state15)
    begin
                ap_block_pp0_stage14_11001 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op57_read_state15 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage14_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op57_read_state15)
    begin
                ap_block_pp0_stage14_subdone <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op57_read_state15 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage15_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op58_read_state16)
    begin
                ap_block_pp0_stage15_11001 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op58_read_state16 = ap_const_boolean_1));
    end process;


    ap_block_pp0_stage15_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op58_read_state16)
    begin
                ap_block_pp0_stage15_subdone <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op58_read_state16 = ap_const_boolean_1));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op44_read_state2)
    begin
                ap_block_pp0_stage1_11001 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op44_read_state2 = ap_const_boolean_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op44_read_state2)
    begin
                ap_block_pp0_stage1_subdone <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op44_read_state2 = ap_const_boolean_1));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op45_read_state3)
    begin
                ap_block_pp0_stage2_11001 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op45_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op45_read_state3)
    begin
                ap_block_pp0_stage2_subdone <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op45_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op46_read_state4)
    begin
                ap_block_pp0_stage3_11001 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op46_read_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op46_read_state4)
    begin
                ap_block_pp0_stage3_subdone <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op46_read_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op47_read_state5)
    begin
                ap_block_pp0_stage4_11001 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op47_read_state5 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op47_read_state5)
    begin
                ap_block_pp0_stage4_subdone <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op47_read_state5 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op48_read_state6)
    begin
                ap_block_pp0_stage5_11001 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op48_read_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage5_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op48_read_state6)
    begin
                ap_block_pp0_stage5_subdone <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op48_read_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op49_read_state7)
    begin
                ap_block_pp0_stage6_11001 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op49_read_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage6_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op49_read_state7)
    begin
                ap_block_pp0_stage6_subdone <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op49_read_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage7_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op50_read_state8)
    begin
                ap_block_pp0_stage7_11001 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op50_read_state8 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage7_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op50_read_state8)
    begin
                ap_block_pp0_stage7_subdone <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op50_read_state8 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage8_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op51_read_state9)
    begin
                ap_block_pp0_stage8_11001 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op51_read_state9 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage8_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op51_read_state9)
    begin
                ap_block_pp0_stage8_subdone <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op51_read_state9 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage9_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op52_read_state10)
    begin
                ap_block_pp0_stage9_11001 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op52_read_state10 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage9_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem0_RVALID, ap_predicate_op52_read_state10)
    begin
                ap_block_pp0_stage9_subdone <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op52_read_state10 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage9_iter0_assign_proc : process(m_axi_gmem0_RVALID, ap_predicate_op52_read_state10)
    begin
                ap_block_state10_pp0_stage9_iter0 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op52_read_state10 = ap_const_boolean_1));
    end process;


    ap_block_state11_pp0_stage10_iter0_assign_proc : process(m_axi_gmem0_RVALID, ap_predicate_op53_read_state11)
    begin
                ap_block_state11_pp0_stage10_iter0 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op53_read_state11 = ap_const_boolean_1));
    end process;


    ap_block_state12_pp0_stage11_iter0_assign_proc : process(m_axi_gmem0_RVALID, ap_predicate_op54_read_state12)
    begin
                ap_block_state12_pp0_stage11_iter0 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op54_read_state12 = ap_const_boolean_1));
    end process;


    ap_block_state13_pp0_stage12_iter0_assign_proc : process(m_axi_gmem0_RVALID, ap_predicate_op55_read_state13)
    begin
                ap_block_state13_pp0_stage12_iter0 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op55_read_state13 = ap_const_boolean_1));
    end process;


    ap_block_state14_pp0_stage13_iter0_assign_proc : process(m_axi_gmem0_RVALID, ap_predicate_op56_read_state14)
    begin
                ap_block_state14_pp0_stage13_iter0 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op56_read_state14 = ap_const_boolean_1));
    end process;


    ap_block_state15_pp0_stage14_iter0_assign_proc : process(m_axi_gmem0_RVALID, ap_predicate_op57_read_state15)
    begin
                ap_block_state15_pp0_stage14_iter0 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op57_read_state15 = ap_const_boolean_1));
    end process;


    ap_block_state16_pp0_stage15_iter0_assign_proc : process(m_axi_gmem0_RVALID, ap_predicate_op58_read_state16)
    begin
                ap_block_state16_pp0_stage15_iter0 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op58_read_state16 = ap_const_boolean_1));
    end process;


    ap_block_state17_pp0_stage0_iter1_assign_proc : process(m_axi_gmem0_RVALID, ap_predicate_op62_read_state17)
    begin
                ap_block_state17_pp0_stage0_iter1 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op62_read_state17 = ap_const_boolean_1));
    end process;

        ap_block_state18_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage1_iter0_assign_proc : process(m_axi_gmem0_RVALID, ap_predicate_op44_read_state2)
    begin
                ap_block_state2_pp0_stage1_iter0 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op44_read_state2 = ap_const_boolean_1));
    end process;


    ap_block_state3_pp0_stage2_iter0_assign_proc : process(m_axi_gmem0_RVALID, ap_predicate_op45_read_state3)
    begin
                ap_block_state3_pp0_stage2_iter0 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op45_read_state3 = ap_const_boolean_1));
    end process;


    ap_block_state4_pp0_stage3_iter0_assign_proc : process(m_axi_gmem0_RVALID, ap_predicate_op46_read_state4)
    begin
                ap_block_state4_pp0_stage3_iter0 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op46_read_state4 = ap_const_boolean_1));
    end process;


    ap_block_state5_pp0_stage4_iter0_assign_proc : process(m_axi_gmem0_RVALID, ap_predicate_op47_read_state5)
    begin
                ap_block_state5_pp0_stage4_iter0 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op47_read_state5 = ap_const_boolean_1));
    end process;


    ap_block_state6_pp0_stage5_iter0_assign_proc : process(m_axi_gmem0_RVALID, ap_predicate_op48_read_state6)
    begin
                ap_block_state6_pp0_stage5_iter0 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op48_read_state6 = ap_const_boolean_1));
    end process;


    ap_block_state7_pp0_stage6_iter0_assign_proc : process(m_axi_gmem0_RVALID, ap_predicate_op49_read_state7)
    begin
                ap_block_state7_pp0_stage6_iter0 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op49_read_state7 = ap_const_boolean_1));
    end process;


    ap_block_state8_pp0_stage7_iter0_assign_proc : process(m_axi_gmem0_RVALID, ap_predicate_op50_read_state8)
    begin
                ap_block_state8_pp0_stage7_iter0 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op50_read_state8 = ap_const_boolean_1));
    end process;


    ap_block_state9_pp0_stage8_iter0_assign_proc : process(m_axi_gmem0_RVALID, ap_predicate_op51_read_state9)
    begin
                ap_block_state9_pp0_stage8_iter0 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_predicate_op51_read_state9 = ap_const_boolean_1));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln34_reg_333, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (icmp_ln34_reg_333 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;

    ap_ext_blocking_cur_n <= (gmem0_blk_n_R);
    ap_ext_blocking_n <= (ap_ext_blocking_cur_n and ap_const_logic_1);

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);
    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_phi_mux_empty_29_phi_fu_109_p4_assign_proc : process(icmp_ln34_reg_333_pp0_iter1_reg, icmp_ln40_reg_337_pp0_iter1_reg, or_ln40_s_fu_243_p17, ap_phi_reg_pp0_iter1_empty_29_reg_106)
    begin
        if (((icmp_ln40_reg_337_pp0_iter1_reg = ap_const_lv1_1) and (icmp_ln34_reg_333_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_empty_29_phi_fu_109_p4 <= or_ln40_s_fu_243_p17;
        else 
            ap_phi_mux_empty_29_phi_fu_109_p4 <= ap_phi_reg_pp0_iter1_empty_29_reg_106;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_empty_29_reg_106 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op44_read_state2_assign_proc : process(icmp_ln34_reg_333, icmp_ln40_reg_337)
    begin
                ap_predicate_op44_read_state2 <= ((icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0));
    end process;


    ap_predicate_op45_read_state3_assign_proc : process(icmp_ln34_reg_333, icmp_ln40_reg_337)
    begin
                ap_predicate_op45_read_state3 <= ((icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0));
    end process;


    ap_predicate_op46_read_state4_assign_proc : process(icmp_ln34_reg_333, icmp_ln40_reg_337)
    begin
                ap_predicate_op46_read_state4 <= ((icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0));
    end process;


    ap_predicate_op47_read_state5_assign_proc : process(icmp_ln34_reg_333, icmp_ln40_reg_337)
    begin
                ap_predicate_op47_read_state5 <= ((icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0));
    end process;


    ap_predicate_op48_read_state6_assign_proc : process(icmp_ln34_reg_333, icmp_ln40_reg_337)
    begin
                ap_predicate_op48_read_state6 <= ((icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0));
    end process;


    ap_predicate_op49_read_state7_assign_proc : process(icmp_ln34_reg_333, icmp_ln40_reg_337)
    begin
                ap_predicate_op49_read_state7 <= ((icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0));
    end process;


    ap_predicate_op50_read_state8_assign_proc : process(icmp_ln34_reg_333, icmp_ln40_reg_337)
    begin
                ap_predicate_op50_read_state8 <= ((icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0));
    end process;


    ap_predicate_op51_read_state9_assign_proc : process(icmp_ln34_reg_333, icmp_ln40_reg_337)
    begin
                ap_predicate_op51_read_state9 <= ((icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0));
    end process;


    ap_predicate_op52_read_state10_assign_proc : process(icmp_ln34_reg_333, icmp_ln40_reg_337)
    begin
                ap_predicate_op52_read_state10 <= ((icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0));
    end process;


    ap_predicate_op53_read_state11_assign_proc : process(icmp_ln34_reg_333, icmp_ln40_reg_337)
    begin
                ap_predicate_op53_read_state11 <= ((icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0));
    end process;


    ap_predicate_op54_read_state12_assign_proc : process(icmp_ln34_reg_333, icmp_ln40_reg_337)
    begin
                ap_predicate_op54_read_state12 <= ((icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0));
    end process;


    ap_predicate_op55_read_state13_assign_proc : process(icmp_ln34_reg_333, icmp_ln40_reg_337)
    begin
                ap_predicate_op55_read_state13 <= ((icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0));
    end process;


    ap_predicate_op56_read_state14_assign_proc : process(icmp_ln34_reg_333, icmp_ln40_reg_337)
    begin
                ap_predicate_op56_read_state14 <= ((icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0));
    end process;


    ap_predicate_op57_read_state15_assign_proc : process(icmp_ln34_reg_333, icmp_ln40_reg_337)
    begin
                ap_predicate_op57_read_state15 <= ((icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0));
    end process;


    ap_predicate_op58_read_state16_assign_proc : process(icmp_ln34_reg_333, icmp_ln40_reg_337)
    begin
                ap_predicate_op58_read_state16 <= ((icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0));
    end process;


    ap_predicate_op62_read_state17_assign_proc : process(icmp_ln34_reg_333, icmp_ln40_reg_337)
    begin
                ap_predicate_op62_read_state17 <= ((icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_itr_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, itr_fu_78)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_itr_2 <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_itr_2 <= itr_fu_78;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);
    empty_30_fu_154_p1 <= ap_sig_allocacmp_itr_2(5 - 1 downto 0);

    gmem0_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, m_axi_gmem0_RVALID, icmp_ln34_reg_333, icmp_ln40_reg_337, ap_predicate_op44_read_state2, ap_CS_fsm_pp0_stage15, ap_predicate_op58_read_state16, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14, ap_block_pp0_stage15, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_predicate_op44_read_state2 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14) and (icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13) and (icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12) and (icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11) and (icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10) and (icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9) and (icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8) and (icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7) and (icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (icmp_ln40_reg_337 = ap_const_lv1_1) and (icmp_ln34_reg_333 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_predicate_op58_read_state16 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage15)))) then 
            gmem0_blk_n_R <= m_axi_gmem0_RVALID;
        else 
            gmem0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    i_3_fu_212_p3 <= 
        add_ln38_fu_194_p2 when (icmp_ln36_fu_188_p2(0) = '1') else 
        i_fu_74;
    icmp_ln34_fu_142_p2 <= "1" when (ap_sig_allocacmp_itr_2 = ap_const_lv9_100) else "0";
    icmp_ln36_fu_188_p2 <= "1" when (j_fu_70 = ap_const_lv9_10) else "0";
    icmp_ln40_fu_158_p2 <= "1" when (empty_30_fu_154_p1 = ap_const_lv5_0) else "0";
    j_5_fu_200_p3 <= 
        ap_const_lv9_0 when (icmp_ln36_fu_188_p2(0) = '1') else 
        j_fu_70;
    j_6_fu_279_p2 <= std_logic_vector(unsigned(j_5_fu_200_p3) + unsigned(ap_const_lv9_1));
    m_axi_gmem0_ARADDR <= ap_const_lv32_0;
    m_axi_gmem0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem0_ARID <= ap_const_lv1_0;
    m_axi_gmem0_ARLEN <= ap_const_lv32_0;
    m_axi_gmem0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem0_ARUSER <= ap_const_lv1_0;
    m_axi_gmem0_ARVALID <= ap_const_logic_0;
    m_axi_gmem0_AWADDR <= ap_const_lv32_0;
    m_axi_gmem0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem0_AWVALID <= ap_const_logic_0;
    m_axi_gmem0_BREADY <= ap_const_logic_0;

    m_axi_gmem0_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_predicate_op44_read_state2, ap_CS_fsm_pp0_stage15, ap_predicate_op58_read_state16, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_predicate_op62_read_state17, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_predicate_op45_read_state3, ap_block_pp0_stage2_11001, ap_predicate_op46_read_state4, ap_block_pp0_stage3_11001, ap_predicate_op47_read_state5, ap_block_pp0_stage4_11001, ap_predicate_op48_read_state6, ap_block_pp0_stage5_11001, ap_predicate_op49_read_state7, ap_block_pp0_stage6_11001, ap_predicate_op50_read_state8, ap_block_pp0_stage7_11001, ap_predicate_op51_read_state9, ap_block_pp0_stage8_11001, ap_predicate_op52_read_state10, ap_block_pp0_stage9_11001, ap_predicate_op53_read_state11, ap_block_pp0_stage10_11001, ap_predicate_op54_read_state12, ap_block_pp0_stage11_11001, ap_predicate_op55_read_state13, ap_block_pp0_stage12_11001, ap_predicate_op56_read_state14, ap_block_pp0_stage13_11001, ap_predicate_op57_read_state15, ap_block_pp0_stage14_11001, ap_block_pp0_stage15_11001)
    begin
        if ((((ap_predicate_op57_read_state15 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001)) or ((ap_predicate_op56_read_state14 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001)) or ((ap_predicate_op55_read_state13 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001)) or ((ap_predicate_op54_read_state12 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001)) or ((ap_predicate_op53_read_state11 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((ap_predicate_op52_read_state10 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001)) or ((ap_predicate_op51_read_state9 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001)) or ((ap_predicate_op50_read_state8 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_predicate_op49_read_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_predicate_op48_read_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_predicate_op47_read_state5 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_predicate_op46_read_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_predicate_op45_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_predicate_op62_read_state17 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op44_read_state2 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_predicate_op58_read_state16 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001)))) then 
            m_axi_gmem0_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_WDATA <= ap_const_lv32_0;
    m_axi_gmem0_WID <= ap_const_lv1_0;
    m_axi_gmem0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_WSTRB <= ap_const_lv4_0;
    m_axi_gmem0_WUSER <= ap_const_lv1_0;
    m_axi_gmem0_WVALID <= ap_const_logic_0;
    or_ln40_s_fu_243_p17 <= (((((((((((((((gmem0_addr_read_15_reg_426 & gmem0_addr_read_14_reg_416) & gmem0_addr_read_13_reg_411) & gmem0_addr_read_12_reg_406) & gmem0_addr_read_11_reg_401) & gmem0_addr_read_10_reg_396) & gmem0_addr_read_9_reg_391) & gmem0_addr_read_8_reg_386) & gmem0_addr_read_7_reg_381) & gmem0_addr_read_6_reg_376) & gmem0_addr_read_5_reg_371) & gmem0_addr_read_4_reg_366) & gmem0_addr_read_3_reg_361) & gmem0_addr_read_2_reg_356) & gmem0_addr_read_1_reg_351) & gmem0_addr_read_reg_346);
    shiftreg4_cast_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shiftreg4_fu_66),512));
    tmp_1_cast_fu_224_p3 <= (trunc_ln40_fu_220_p1 & ap_const_lv4_0);
    trunc_ln36_fu_208_p1 <= j_5_fu_200_p3(8 - 1 downto 0);
    trunc_ln40_fu_220_p1 <= i_3_fu_212_p3(4 - 1 downto 0);
    zext_ln40_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_fu_232_p2),32));
end behav;
