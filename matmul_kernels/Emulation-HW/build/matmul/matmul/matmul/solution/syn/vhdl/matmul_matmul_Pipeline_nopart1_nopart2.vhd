-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matmul_matmul_Pipeline_nopart1_nopart2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    C_V_ce0 : OUT STD_LOGIC;
    C_V_we0 : OUT STD_LOGIC;
    C_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    C_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    C_V_ce1 : OUT STD_LOGIC;
    C_V_we1 : OUT STD_LOGIC;
    C_V_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    A_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_V_ce0 : OUT STD_LOGIC;
    A_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    B_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_V_ce0 : OUT STD_LOGIC;
    B_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    B_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_V_ce1 : OUT STD_LOGIC;
    B_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of matmul_matmul_Pipeline_nopart1_nopart2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00001001";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal icmp_ln68_reg_1511 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln68_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_31_fu_523_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_31_reg_1515 : STD_LOGIC_VECTOR (3 downto 0);
    signal cmp59_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp59_reg_1520 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp59_reg_1520_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_550_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_reg_1545 : STD_LOGIC_VECTOR (7 downto 0);
    signal cmp72_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp72_reg_1573 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp72_reg_1573_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal A_V_load_reg_1587 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_709_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_1637 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal tmp_21_cast_fu_545_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln232_fu_558_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_569_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_610_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tmp_21_fu_624_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_638_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal tmp_23_fu_652_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_669_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal tmp_25_fu_683_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_cast_fu_716_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal tmp_6_fu_727_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_741_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_755_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_797_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal tmp_8_fu_811_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_825_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_839_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_881_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal tmp_s_fu_895_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_909_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_923_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_965_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal tmp_3_fu_979_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_993_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_1007_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1049_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_1063_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_1105_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_1119_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_1161_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_1175_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_1217_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_1231_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_fu_80 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln72_fu_584_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_col_load : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_sum_V_0_1_fu_84 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1248_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_sum_V_1_1_fu_88 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1258_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_sum_V_2_1_fu_92 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1268_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_sum_V_3_1_fu_96 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1277_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_sum_V_4_1_fu_100 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1286_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_sum_V_5_1_fu_104 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1295_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_sum_V_6_1_fu_108 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1304_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_sum_V_7_1_fu_112 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1313_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_sum_V_8_1_fu_116 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1322_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_sum_V_9_1_fu_120 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1331_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_sum_V_10_1_fu_124 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1340_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_sum_V_11_1_fu_128 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1349_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_sum_V_12_1_fu_132 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1358_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_sum_V_13_1_fu_136 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1367_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_sum_V_14_1_fu_140 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1376_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_sum_V_15_1_fu_144 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1385_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal row_fu_148 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln68_1_fu_515_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_row_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_152 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln68_1_fu_483_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln72_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln68_fu_495_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln68_fu_507_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_32_fu_533_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_17_fu_537_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln232_fu_563_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln232_1_fu_605_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln232_2_fu_619_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln232_3_fu_633_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln232_4_fu_647_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln232_5_fu_664_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln232_6_fu_678_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln82_fu_721_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln232_7_fu_736_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln232_8_fu_750_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln82_1_fu_792_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln82_2_fu_806_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln232_9_fu_820_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln232_10_fu_834_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln82_3_fu_876_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln82_4_fu_890_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln232_11_fu_904_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln232_12_fu_918_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln82_5_fu_960_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln82_6_fu_974_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln232_13_fu_988_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln232_14_fu_1002_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln82_7_fu_1044_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln82_8_fu_1058_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln82_9_fu_1100_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln82_10_fu_1114_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln82_11_fu_1156_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln82_12_fu_1170_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln82_13_fu_1212_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln82_14_fu_1226_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1248_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1258_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1268_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1277_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1286_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1295_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1304_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1313_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1322_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1331_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1340_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1349_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1358_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1367_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1376_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1385_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component matmul_mac_muladd_16s_16s_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matmul_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_16s_16s_16ns_16_4_1_U7 : component matmul_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => B_V_q1,
        din1 => A_V_q0,
        din2 => grp_fu_1248_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1248_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U8 : component matmul_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => B_V_q0,
        din1 => A_V_q0,
        din2 => grp_fu_1258_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1258_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U9 : component matmul_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => B_V_q1,
        din1 => A_V_load_reg_1587,
        din2 => grp_fu_1268_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1268_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U10 : component matmul_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => B_V_q0,
        din1 => A_V_load_reg_1587,
        din2 => grp_fu_1277_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1277_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U11 : component matmul_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => B_V_q1,
        din1 => A_V_load_reg_1587,
        din2 => grp_fu_1286_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1286_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U12 : component matmul_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => B_V_q0,
        din1 => A_V_load_reg_1587,
        din2 => grp_fu_1295_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1295_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U13 : component matmul_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => B_V_q1,
        din1 => A_V_load_reg_1587,
        din2 => grp_fu_1304_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1304_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U14 : component matmul_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => B_V_q0,
        din1 => A_V_load_reg_1587,
        din2 => grp_fu_1313_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1313_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U15 : component matmul_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => B_V_q1,
        din1 => A_V_load_reg_1587,
        din2 => grp_fu_1322_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1322_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U16 : component matmul_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => B_V_q0,
        din1 => A_V_load_reg_1587,
        din2 => grp_fu_1331_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1331_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U17 : component matmul_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => B_V_q1,
        din1 => A_V_load_reg_1587,
        din2 => grp_fu_1340_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1340_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U18 : component matmul_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => B_V_q0,
        din1 => A_V_load_reg_1587,
        din2 => grp_fu_1349_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1349_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U19 : component matmul_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => B_V_q1,
        din1 => A_V_load_reg_1587,
        din2 => grp_fu_1358_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1358_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U20 : component matmul_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => B_V_q0,
        din1 => A_V_load_reg_1587,
        din2 => grp_fu_1367_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1367_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U21 : component matmul_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => B_V_q1,
        din1 => A_V_load_reg_1587,
        din2 => grp_fu_1376_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1376_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U22 : component matmul_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => B_V_q0,
        din1 => A_V_load_reg_1587,
        din2 => grp_fu_1385_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1385_p3);

    flow_control_loop_pipe_sequential_init_U : component matmul_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    col_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln68_fu_477_p2 = ap_const_lv1_0))) then 
                    col_fu_80 <= add_ln72_fu_584_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    col_fu_80 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln68_fu_477_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_152 <= add_ln68_1_fu_483_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_152 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;

    row_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln68_fu_477_p2 = ap_const_lv1_0))) then 
                    row_fu_148 <= select_ln68_1_fu_515_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    row_fu_148 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_reg_1511 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                A_V_load_reg_1587 <= A_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln68_fu_477_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                cmp59_reg_1520 <= cmp59_fu_527_p2;
                cmp72_reg_1573 <= cmp72_fu_578_p2;
                empty_31_reg_1515 <= empty_31_fu_523_p1;
                    tmp_18_reg_1545(7 downto 4) <= tmp_18_fu_550_p3(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                cmp59_reg_1520_pp0_iter1_reg <= cmp59_reg_1520;
                cmp72_reg_1573_pp0_iter1_reg <= cmp72_reg_1573;
                icmp_ln68_reg_1511 <= icmp_ln68_fu_477_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_reg_1511 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                temp_sum_V_0_1_fu_84 <= grp_fu_1248_p3;
                temp_sum_V_1_1_fu_88 <= grp_fu_1258_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                temp_sum_V_10_1_fu_124 <= grp_fu_1340_p3;
                temp_sum_V_11_1_fu_128 <= grp_fu_1349_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                temp_sum_V_12_1_fu_132 <= grp_fu_1358_p3;
                temp_sum_V_13_1_fu_136 <= grp_fu_1367_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                temp_sum_V_14_1_fu_140 <= grp_fu_1376_p3;
                temp_sum_V_15_1_fu_144 <= grp_fu_1385_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_reg_1511 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                temp_sum_V_2_1_fu_92 <= grp_fu_1268_p3;
                temp_sum_V_3_1_fu_96 <= grp_fu_1277_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_reg_1511 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                temp_sum_V_4_1_fu_100 <= grp_fu_1286_p3;
                temp_sum_V_5_1_fu_104 <= grp_fu_1295_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_reg_1511 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                temp_sum_V_6_1_fu_108 <= grp_fu_1304_p3;
                temp_sum_V_7_1_fu_112 <= grp_fu_1313_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                temp_sum_V_8_1_fu_116 <= grp_fu_1322_p3;
                temp_sum_V_9_1_fu_120 <= grp_fu_1331_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_reg_1511 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                    tmp_5_reg_1637(7 downto 4) <= tmp_5_fu_709_p3(7 downto 4);
            end if;
        end if;
    end process;
    tmp_18_reg_1545(3 downto 0) <= "0000";
    tmp_5_reg_1637(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_condition_exit_pp0_iter0_stage3, ap_block_pp0_stage7_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    A_V_address0 <= tmp_21_cast_fu_545_p1(8 - 1 downto 0);

    A_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_V_ce0 <= ap_const_logic_1;
        else 
            A_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage0, tmp_19_fu_569_p3, ap_block_pp0_stage1, tmp_21_fu_624_p3, ap_block_pp0_stage2, tmp_23_fu_652_p3, ap_block_pp0_stage3, tmp_25_fu_683_p3, ap_block_pp0_stage4, tmp_27_fu_755_p3, ap_block_pp0_stage5, tmp_29_fu_839_p3, ap_block_pp0_stage6, tmp_31_fu_923_p3, ap_block_pp0_stage7, tmp_33_fu_1007_p3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                B_V_address0 <= tmp_33_fu_1007_p3(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                B_V_address0 <= tmp_31_fu_923_p3(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                B_V_address0 <= tmp_29_fu_839_p3(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                B_V_address0 <= tmp_27_fu_755_p3(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                B_V_address0 <= tmp_25_fu_683_p3(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                B_V_address0 <= tmp_23_fu_652_p3(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                B_V_address0 <= tmp_21_fu_624_p3(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                B_V_address0 <= tmp_19_fu_569_p3(8 - 1 downto 0);
            else 
                B_V_address0 <= "XXXXXXXX";
            end if;
        else 
            B_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    B_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage0, zext_ln232_fu_558_p1, tmp_20_fu_610_p3, ap_block_pp0_stage1, tmp_22_fu_638_p3, ap_block_pp0_stage2, tmp_24_fu_669_p3, ap_block_pp0_stage3, ap_block_pp0_stage4, tmp_26_fu_741_p3, ap_block_pp0_stage5, tmp_28_fu_825_p3, ap_block_pp0_stage6, tmp_30_fu_909_p3, ap_block_pp0_stage7, tmp_32_fu_993_p3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                B_V_address1 <= tmp_32_fu_993_p3(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                B_V_address1 <= tmp_30_fu_909_p3(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                B_V_address1 <= tmp_28_fu_825_p3(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                B_V_address1 <= tmp_26_fu_741_p3(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                B_V_address1 <= tmp_24_fu_669_p3(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                B_V_address1 <= tmp_22_fu_638_p3(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                B_V_address1 <= tmp_20_fu_610_p3(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                B_V_address1 <= zext_ln232_fu_558_p1(8 - 1 downto 0);
            else 
                B_V_address1 <= "XXXXXXXX";
            end if;
        else 
            B_V_address1 <= "XXXXXXXX";
        end if; 
    end process;


    B_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            B_V_ce0 <= ap_const_logic_1;
        else 
            B_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            B_V_ce1 <= ap_const_logic_1;
        else 
            B_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    C_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, tmp_6_fu_727_p3, ap_block_pp0_stage5, tmp_8_fu_811_p3, ap_block_pp0_stage6, tmp_s_fu_895_p3, ap_block_pp0_stage7, tmp_3_fu_979_p3, tmp_10_fu_1063_p3, tmp_12_fu_1119_p3, tmp_14_fu_1175_p3, tmp_16_fu_1231_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            C_V_address0 <= tmp_16_fu_1231_p3(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            C_V_address0 <= tmp_14_fu_1175_p3(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            C_V_address0 <= tmp_12_fu_1119_p3(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            C_V_address0 <= tmp_10_fu_1063_p3(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            C_V_address0 <= tmp_3_fu_979_p3(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            C_V_address0 <= tmp_s_fu_895_p3(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            C_V_address0 <= tmp_8_fu_811_p3(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            C_V_address0 <= tmp_6_fu_727_p3(8 - 1 downto 0);
        else 
            C_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    C_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, tmp_5_cast_fu_716_p1, ap_block_pp0_stage4, tmp_7_fu_797_p3, ap_block_pp0_stage5, tmp_9_fu_881_p3, ap_block_pp0_stage6, tmp_2_fu_965_p3, ap_block_pp0_stage7, tmp_4_fu_1049_p3, tmp_11_fu_1105_p3, tmp_13_fu_1161_p3, tmp_15_fu_1217_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            C_V_address1 <= tmp_15_fu_1217_p3(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            C_V_address1 <= tmp_13_fu_1161_p3(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            C_V_address1 <= tmp_11_fu_1105_p3(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            C_V_address1 <= tmp_4_fu_1049_p3(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            C_V_address1 <= tmp_2_fu_965_p3(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            C_V_address1 <= tmp_9_fu_881_p3(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            C_V_address1 <= tmp_7_fu_797_p3(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            C_V_address1 <= tmp_5_cast_fu_716_p1(8 - 1 downto 0);
        else 
            C_V_address1 <= "XXXXXXXX";
        end if; 
    end process;


    C_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            C_V_ce0 <= ap_const_logic_1;
        else 
            C_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            C_V_ce1 <= ap_const_logic_1;
        else 
            C_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    C_V_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, grp_fu_1258_p3, grp_fu_1277_p3, grp_fu_1295_p3, grp_fu_1313_p3, grp_fu_1331_p3, grp_fu_1349_p3, grp_fu_1367_p3, grp_fu_1385_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            C_V_d0 <= grp_fu_1385_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            C_V_d0 <= grp_fu_1367_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            C_V_d0 <= grp_fu_1349_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            C_V_d0 <= grp_fu_1331_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            C_V_d0 <= grp_fu_1313_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            C_V_d0 <= grp_fu_1295_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            C_V_d0 <= grp_fu_1277_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            C_V_d0 <= grp_fu_1258_p3;
        else 
            C_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_V_d1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, grp_fu_1248_p3, grp_fu_1268_p3, grp_fu_1286_p3, grp_fu_1304_p3, grp_fu_1322_p3, grp_fu_1340_p3, grp_fu_1358_p3, grp_fu_1376_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            C_V_d1 <= grp_fu_1376_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            C_V_d1 <= grp_fu_1358_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            C_V_d1 <= grp_fu_1340_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            C_V_d1 <= grp_fu_1322_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            C_V_d1 <= grp_fu_1304_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            C_V_d1 <= grp_fu_1286_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            C_V_d1 <= grp_fu_1268_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            C_V_d1 <= grp_fu_1248_p3;
        else 
            C_V_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, icmp_ln68_reg_1511, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_block_pp0_stage0_11001, cmp72_reg_1573, cmp72_reg_1573_pp0_iter1_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (cmp72_reg_1573 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (cmp72_reg_1573_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (cmp72_reg_1573_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln68_reg_1511 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (cmp72_reg_1573 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((icmp_ln68_reg_1511 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (cmp72_reg_1573 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((icmp_ln68_reg_1511 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (cmp72_reg_1573 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((icmp_ln68_reg_1511 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (cmp72_reg_1573 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (cmp72_reg_1573_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            C_V_we0 <= ap_const_logic_1;
        else 
            C_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    C_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, icmp_ln68_reg_1511, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_block_pp0_stage0_11001, cmp72_reg_1573, cmp72_reg_1573_pp0_iter1_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (cmp72_reg_1573 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (cmp72_reg_1573_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (cmp72_reg_1573_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln68_reg_1511 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (cmp72_reg_1573 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((icmp_ln68_reg_1511 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (cmp72_reg_1573 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((icmp_ln68_reg_1511 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (cmp72_reg_1573 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((icmp_ln68_reg_1511 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (cmp72_reg_1573 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (cmp72_reg_1573_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            C_V_we1 <= ap_const_logic_1;
        else 
            C_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln68_1_fu_483_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv9_1));
    add_ln68_fu_495_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_row_load) + unsigned(ap_const_lv5_1));
    add_ln72_fu_584_p2 <= std_logic_vector(unsigned(select_ln68_fu_507_p3) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, icmp_ln68_reg_1511)
    begin
        if (((icmp_ln68_reg_1511 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;

    ap_ext_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);
    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_col_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, col_fu_80, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_col_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_col_load <= col_fu_80;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_152)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_152;
        end if; 
    end process;


    ap_sig_allocacmp_row_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, row_fu_148)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_row_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_row_load <= row_fu_148;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);
    cmp59_fu_527_p2 <= "1" when (select_ln68_fu_507_p3 = ap_const_lv5_0) else "0";
    cmp72_fu_578_p2 <= "1" when (select_ln68_fu_507_p3 = ap_const_lv5_F) else "0";
    empty_31_fu_523_p1 <= select_ln68_1_fu_515_p3(4 - 1 downto 0);
    empty_32_fu_533_p1 <= select_ln68_fu_507_p3(4 - 1 downto 0);
    grp_fu_1248_p2 <= 
        ap_const_lv16_0 when (cmp59_reg_1520(0) = '1') else 
        temp_sum_V_0_1_fu_84;
    grp_fu_1258_p2 <= 
        ap_const_lv16_0 when (cmp59_reg_1520(0) = '1') else 
        temp_sum_V_1_1_fu_88;
    grp_fu_1268_p2 <= 
        ap_const_lv16_0 when (cmp59_reg_1520(0) = '1') else 
        temp_sum_V_2_1_fu_92;
    grp_fu_1277_p2 <= 
        ap_const_lv16_0 when (cmp59_reg_1520(0) = '1') else 
        temp_sum_V_3_1_fu_96;
    grp_fu_1286_p2 <= 
        ap_const_lv16_0 when (cmp59_reg_1520(0) = '1') else 
        temp_sum_V_4_1_fu_100;
    grp_fu_1295_p2 <= 
        ap_const_lv16_0 when (cmp59_reg_1520(0) = '1') else 
        temp_sum_V_5_1_fu_104;
    grp_fu_1304_p2 <= 
        ap_const_lv16_0 when (cmp59_reg_1520(0) = '1') else 
        temp_sum_V_6_1_fu_108;
    grp_fu_1313_p2 <= 
        ap_const_lv16_0 when (cmp59_reg_1520(0) = '1') else 
        temp_sum_V_7_1_fu_112;
    grp_fu_1322_p2 <= 
        ap_const_lv16_0 when (cmp59_reg_1520(0) = '1') else 
        temp_sum_V_8_1_fu_116;
    grp_fu_1331_p2 <= 
        ap_const_lv16_0 when (cmp59_reg_1520(0) = '1') else 
        temp_sum_V_9_1_fu_120;
    grp_fu_1340_p2 <= 
        ap_const_lv16_0 when (cmp59_reg_1520(0) = '1') else 
        temp_sum_V_10_1_fu_124;
    grp_fu_1349_p2 <= 
        ap_const_lv16_0 when (cmp59_reg_1520(0) = '1') else 
        temp_sum_V_11_1_fu_128;
    grp_fu_1358_p2 <= 
        ap_const_lv16_0 when (cmp59_reg_1520_pp0_iter1_reg(0) = '1') else 
        temp_sum_V_12_1_fu_132;
    grp_fu_1367_p2 <= 
        ap_const_lv16_0 when (cmp59_reg_1520_pp0_iter1_reg(0) = '1') else 
        temp_sum_V_13_1_fu_136;
    grp_fu_1376_p2 <= 
        ap_const_lv16_0 when (cmp59_reg_1520_pp0_iter1_reg(0) = '1') else 
        temp_sum_V_14_1_fu_140;
    grp_fu_1385_p2 <= 
        ap_const_lv16_0 when (cmp59_reg_1520_pp0_iter1_reg(0) = '1') else 
        temp_sum_V_15_1_fu_144;
    icmp_ln68_fu_477_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv9_100) else "0";
    icmp_ln72_fu_501_p2 <= "1" when (ap_sig_allocacmp_col_load = ap_const_lv5_10) else "0";
    or_ln232_10_fu_834_p2 <= (tmp_18_reg_1545 or ap_const_lv8_B);
    or_ln232_11_fu_904_p2 <= (tmp_18_reg_1545 or ap_const_lv8_C);
    or_ln232_12_fu_918_p2 <= (tmp_18_reg_1545 or ap_const_lv8_D);
    or_ln232_13_fu_988_p2 <= (tmp_18_reg_1545 or ap_const_lv8_E);
    or_ln232_14_fu_1002_p2 <= (tmp_18_reg_1545 or ap_const_lv8_F);
    or_ln232_1_fu_605_p2 <= (tmp_18_reg_1545 or ap_const_lv8_2);
    or_ln232_2_fu_619_p2 <= (tmp_18_reg_1545 or ap_const_lv8_3);
    or_ln232_3_fu_633_p2 <= (tmp_18_reg_1545 or ap_const_lv8_4);
    or_ln232_4_fu_647_p2 <= (tmp_18_reg_1545 or ap_const_lv8_5);
    or_ln232_5_fu_664_p2 <= (tmp_18_reg_1545 or ap_const_lv8_6);
    or_ln232_6_fu_678_p2 <= (tmp_18_reg_1545 or ap_const_lv8_7);
    or_ln232_7_fu_736_p2 <= (tmp_18_reg_1545 or ap_const_lv8_8);
    or_ln232_8_fu_750_p2 <= (tmp_18_reg_1545 or ap_const_lv8_9);
    or_ln232_9_fu_820_p2 <= (tmp_18_reg_1545 or ap_const_lv8_A);
    or_ln232_fu_563_p2 <= (tmp_18_fu_550_p3 or ap_const_lv8_1);
    or_ln82_10_fu_1114_p2 <= (tmp_5_reg_1637 or ap_const_lv8_B);
    or_ln82_11_fu_1156_p2 <= (tmp_5_reg_1637 or ap_const_lv8_C);
    or_ln82_12_fu_1170_p2 <= (tmp_5_reg_1637 or ap_const_lv8_D);
    or_ln82_13_fu_1212_p2 <= (tmp_5_reg_1637 or ap_const_lv8_E);
    or_ln82_14_fu_1226_p2 <= (tmp_5_reg_1637 or ap_const_lv8_F);
    or_ln82_1_fu_792_p2 <= (tmp_5_reg_1637 or ap_const_lv8_2);
    or_ln82_2_fu_806_p2 <= (tmp_5_reg_1637 or ap_const_lv8_3);
    or_ln82_3_fu_876_p2 <= (tmp_5_reg_1637 or ap_const_lv8_4);
    or_ln82_4_fu_890_p2 <= (tmp_5_reg_1637 or ap_const_lv8_5);
    or_ln82_5_fu_960_p2 <= (tmp_5_reg_1637 or ap_const_lv8_6);
    or_ln82_6_fu_974_p2 <= (tmp_5_reg_1637 or ap_const_lv8_7);
    or_ln82_7_fu_1044_p2 <= (tmp_5_reg_1637 or ap_const_lv8_8);
    or_ln82_8_fu_1058_p2 <= (tmp_5_reg_1637 or ap_const_lv8_9);
    or_ln82_9_fu_1100_p2 <= (tmp_5_reg_1637 or ap_const_lv8_A);
    or_ln82_fu_721_p2 <= (tmp_5_fu_709_p3 or ap_const_lv8_1);
    select_ln68_1_fu_515_p3 <= 
        add_ln68_fu_495_p2 when (icmp_ln72_fu_501_p2(0) = '1') else 
        ap_sig_allocacmp_row_load;
    select_ln68_fu_507_p3 <= 
        ap_const_lv5_0 when (icmp_ln72_fu_501_p2(0) = '1') else 
        ap_sig_allocacmp_col_load;
    tmp_10_fu_1063_p3 <= (ap_const_lv24_0 & or_ln82_8_fu_1058_p2);
    tmp_11_fu_1105_p3 <= (ap_const_lv24_0 & or_ln82_9_fu_1100_p2);
    tmp_12_fu_1119_p3 <= (ap_const_lv24_0 & or_ln82_10_fu_1114_p2);
    tmp_13_fu_1161_p3 <= (ap_const_lv24_0 & or_ln82_11_fu_1156_p2);
    tmp_14_fu_1175_p3 <= (ap_const_lv24_0 & or_ln82_12_fu_1170_p2);
    tmp_15_fu_1217_p3 <= (ap_const_lv24_0 & or_ln82_13_fu_1212_p2);
    tmp_16_fu_1231_p3 <= (ap_const_lv24_0 & or_ln82_14_fu_1226_p2);
    tmp_17_fu_537_p3 <= (empty_31_fu_523_p1 & empty_32_fu_533_p1);
    tmp_18_fu_550_p3 <= (empty_32_fu_533_p1 & ap_const_lv4_0);
    tmp_19_fu_569_p3 <= (ap_const_lv24_0 & or_ln232_fu_563_p2);
    tmp_20_fu_610_p3 <= (ap_const_lv24_0 & or_ln232_1_fu_605_p2);
    tmp_21_cast_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_537_p3),32));
    tmp_21_fu_624_p3 <= (ap_const_lv24_0 & or_ln232_2_fu_619_p2);
    tmp_22_fu_638_p3 <= (ap_const_lv24_0 & or_ln232_3_fu_633_p2);
    tmp_23_fu_652_p3 <= (ap_const_lv24_0 & or_ln232_4_fu_647_p2);
    tmp_24_fu_669_p3 <= (ap_const_lv24_0 & or_ln232_5_fu_664_p2);
    tmp_25_fu_683_p3 <= (ap_const_lv24_0 & or_ln232_6_fu_678_p2);
    tmp_26_fu_741_p3 <= (ap_const_lv24_0 & or_ln232_7_fu_736_p2);
    tmp_27_fu_755_p3 <= (ap_const_lv24_0 & or_ln232_8_fu_750_p2);
    tmp_28_fu_825_p3 <= (ap_const_lv24_0 & or_ln232_9_fu_820_p2);
    tmp_29_fu_839_p3 <= (ap_const_lv24_0 & or_ln232_10_fu_834_p2);
    tmp_2_fu_965_p3 <= (ap_const_lv24_0 & or_ln82_5_fu_960_p2);
    tmp_30_fu_909_p3 <= (ap_const_lv24_0 & or_ln232_11_fu_904_p2);
    tmp_31_fu_923_p3 <= (ap_const_lv24_0 & or_ln232_12_fu_918_p2);
    tmp_32_fu_993_p3 <= (ap_const_lv24_0 & or_ln232_13_fu_988_p2);
    tmp_33_fu_1007_p3 <= (ap_const_lv24_0 & or_ln232_14_fu_1002_p2);
    tmp_3_fu_979_p3 <= (ap_const_lv24_0 & or_ln82_6_fu_974_p2);
    tmp_4_fu_1049_p3 <= (ap_const_lv24_0 & or_ln82_7_fu_1044_p2);
    tmp_5_cast_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_709_p3),32));
    tmp_5_fu_709_p3 <= (empty_31_reg_1515 & ap_const_lv4_0);
    tmp_6_fu_727_p3 <= (ap_const_lv24_0 & or_ln82_fu_721_p2);
    tmp_7_fu_797_p3 <= (ap_const_lv24_0 & or_ln82_1_fu_792_p2);
    tmp_8_fu_811_p3 <= (ap_const_lv24_0 & or_ln82_2_fu_806_p2);
    tmp_9_fu_881_p3 <= (ap_const_lv24_0 & or_ln82_3_fu_876_p2);
    tmp_s_fu_895_p3 <= (ap_const_lv24_0 & or_ln82_4_fu_890_p2);
    zext_ln232_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_550_p3),32));
end behav;
